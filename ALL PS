PROBLEM STATEMENT  1 : 
Write a java program to take input as a command line argument. Your name, course, university,roll no and semester. Display the information.
Name: 
UniversityRollNo:
Course:
Semester:

INPUT : 

import java.util.*;

public class CommandLineArgumentsShikhar {
    public static void main(String[] args) {
        if (args.length < 4) {
            System.out.println("Please Enter Your  name, course, university roll number, and semester.");
            return;
        }

        String name = args[0];
        String  universityRollNo = args[1];
        String  course  = args[2];
        String semester = args[3];

        System.out.println("Name: " + name);
        System.out.println("University Roll No: " + universityRollNo);
        System.out.println("Course: " + course);
        System.out.println("Semester: " + semester);
    }
}











PROBLEM STATEMENT 2 : 
Using the switch statement, write a menu-driven program to calculate the maturity amount of a bank deposit. The user is given the following options: (i) Term Deposit (ii) Recurring Deposit For option (i) accept Principal (p), rate of interest (r) and time period in years (n). Calculate and output the maturity amount (a) receivable using the formula a = p[1 + r / 100]n. For option (ii) accept monthly instalment (p), rate of interest (r) and time period in months (n). Calculate and output the maturity amount (a) receivable using the formula a = p * n + p * n(n + 1) / 2 * r / 100 * 1 / 12. For an incorrect option, an appropriate error message should be displayed.

INPUT :

import java.util.Scanner;

public class BankDepositCalculatorShikhar {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Menu:");
        System.out.println("1. Term Deposit");
        System.out.println("2. Recurring Deposit");
        System.out.print("Enter your choice (1 or 2): ");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                System.out.print("Enter Principal amount: ");
                double principal = scanner.nextDouble();
                System.out.print("Enter rate of interest (in percentage): ");
                double interestRate = scanner.nextDouble();
                System.out.print("Enter time period in years: ");
                int timePeriodYears = scanner.nextInt();

                double maturityAmountTermDeposit = principal * Math.pow((1 + interestRate / 100), timePeriodYears);
                System.out.println("Maturity Amount: " + maturityAmountTermDeposit);
                break;

            case 2:
                System.out.print("Enter Monthly Installment amount: ");
                double installment = scanner.nextDouble();
                System.out.print("Enter rate of interest (in percentage): ");
                interestRate = scanner.nextDouble();
                System.out.print("Enter time period in months: ");
                int timePeriodMonths = scanner.nextInt();

                double maturityAmountRecurringDeposit = installment * timePeriodMonths + installment * timePeriodMonths * (timePeriodMonths + 1) / 2 * interestRate / 100 * 1 / 12;
                System.out.println("Maturity Amount: " + maturityAmountRecurringDeposit);
                break;

            default:
                System.out.println("Invalid choice! ");
                break;
        }

        scanner.close();
    }
}













PROBLEM STATEMENT 3 : 
Program to find if the given numbers are Friendly pair or not (Amicable or not). Friendly Pair are two or more numbers with a common abundance. Input & Output format:  Input consists of 2 integers.  The first integer corresponds to number 1 and the second integer corresponds to number 2.  If it is a Friendly Pair display Friendly Pair or  displays Not Friendly Pair. 
For example,6 and 28 are Friendly Pair. (Sum of divisors of 6)/6 = (Sum of divisors of 28)/28. Steps to check whether the given numbers are friendly pair or not  Input the numbers num1 and num2.  Initialize sum1 = sum2 = 0.  sum1 = sum of all divisors of num1.  sum2 = sum of all divisors of num2.  If (sum1 == num1) and (sum2 == num2), then print "Abundant Numbers".  Else, print "Not Abundant Numbers". Program to check whether the given numbers are friendly pair or not.

INPUT :  

import java.util.Scanner;

public class FriendlyPairCheckerShikhar {
    public static void main(String[] args) {
        int num1, num2;
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the first number: ");
        num1 = scanner.nextInt();
        System.out.print("Enter the second number: ");
        num2 = scanner.nextInt();

        int sum1 = 0, sum2 = 0;
        for (int i = 1; i < num1; i++) {
            if (num1 % i == 0) {
                sum1 += i;
            }
        }
        for (int i = 1; i < num2; i++) {
            if (num2 % i == 0) {
                sum2 += i;
            }
        }

        if (sum1 == num1 && sum2 == num2) {
            System.out.println("Friendly Pair");
        } else {
            System.out.println("Not Friendly Pair");
        }

        scanner.close();
    }
}

















PROBLEM STATEMENT 4 : 
Program to replace all 0's with 1 in a given integer. Given an integer as an input, all the 0's in the number has to be replaced with 1. For example, consider the following number Input: 102405 Output: 112415 Input: 56004 Output: 56114 Steps to replace all 0's with 1 in a given integer  Input the integer from the user.  Traverse the integer digit by digit.  If a '0' is encountered, replace it by '1'.  Print the integer.

INPUT : 

import java.util.Scanner;

public class ReplaceZerosWithOnesShikhar {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter an integer: ");
        int number = scanner.nextInt();

        int result = replaceZerosWithOnes(number);
        System.out.println("Output: " + result);

        scanner.close();
    }

    public static int replaceZerosWithOnes(int number) {
        int result = 0;
        int multiplier = 1;

        while (number > 0) {
            int digit = number % 10;
            if (digit == 0) {
                digit = 1;
            }
            result += digit * multiplier;
            multiplier *= 10;
            number /= 10;
        }

        return result;
    }
}













PROBLEM STATEMENT 5:
Printing an array into Zigzag fashion. Suppose you were given an array of integers, and you are told to sort the integers in a zigzag pattern. In general, in a zigzag pattern, the first integer is less than the second integer, which is greater than the third integer, which is less than the fourth integer, and so on. Hence, the converted array should be in the form of e1 < e2 > e3 < e4 > e5 < e6.

INPUT : 

import java.util.Scanner;

public class ZigZagShikhar {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n, i;
        System.out.print("Enter the size of an Array: ");
        n = scanner.nextInt();
        int arr[] = new int[n];
        System.out.print("Input the array elements: ");
        for (i = 0; i < arr.length; i++) {
            arr[i] = scanner.nextInt();
        }
        System.out.println("Original array:");
        for (i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        boolean flag = true;
        int temp = 0;
        for (i = 0; i <= arr.length - 2; i++) {
            if (flag) {
                if (arr[i] > arr[i + 1]) {
                    temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;
                }
            } else {
                if (arr[i] < arr[i + 1]) {
                    temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;
                }
            }
            flag = !flag;
        }
        System.out.println("\nRearranged array:");
        for (i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }

        scanner.close();
    }
}
















PROBLEM STATEMENT 6 : 
The problem to rearrange positive and negative numbers in an array . Method: This approach moves all negative numbers to the beginning and positive numbers to the end but changes the order of appearance of the elements of the array. Steps: 1. Declare an array and input the array elements. 2. Start traversing the array and if the current element is negative, swap the current element with the first positive element and continue traversing until all the elements have been encountered. 3. Print the rearranged array.

INPUT : 

import java.util.Scanner;

public class RearrangedShikhar {
    static void rearrange(int arr[], int n) {
        int i, j;
        j = 0;
        for (i = 0; i < n; i++) {
            if (arr[i] < 0) {
                if (i != j) {
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
                j++;
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n, i;
        System.out.print("Enter the number of elements: ");
        n = scanner.nextInt();
        int arr[] = new int[n];
        System.out.print("Input the array elements: ");
        for (i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        System.out.print("Original array: ");
        for (i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        rearrange(arr, n);
        System.out.print("Rearranged array: ");
        for (i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }

        scanner.close();
    }
}

















PROBLEM STATEMENT 7 : 
Program to find the saddle point coordinates in a given matrix. A saddle point is an element of the matrix, which is the minimum element in its row and the maximum in its column. 
For example, consider the matrix given :  Mat[3][3] 1 2 3 4 5 6 7 8 9.
 Here, 7 is the saddle point because it is the minimum element in its row and maximum element in its column. Steps to find the saddle point coordinates in a given matrix : 
 1. Input the matrix from the user.
 2. Use two loops, one for traversing the row and the other for traversing the column. 
3. If the current element is the minimum element in its row and maximum element in its column, then return its coordinates. 
4. Else, continue traversing.

INPUT : 

import java.util.Scanner;

public class SaddlePointShikhar {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rows, columns;
        System.out.print("Enter the number of rows in the matrix: ");
        rows = scanner.nextInt();
        System.out.print("Enter the number of columns in the matrix: ");
        columns = scanner.nextInt();
        int[][] matrix = new int[rows][columns];

        System.out.println("Enter the matrix elements:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Matrix:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        int saddlePointRow = -1;
        int saddlePointColumn = -1;

        for (int i = 0; i < rows; i++) {
            int minRowElementIndex = 0;
            for (int j = 1; j < columns; j++) {
                if (matrix[i][j] < matrix[i][minRowElementIndex]) {
                    minRowElementIndex = j;
                }
            }

            boolean isSaddlePoint = true;
            for (int k = 0; k < rows; k++) {
                if (matrix[k][minRowElementIndex] > matrix[i][minRowElementIndex]) {
                    isSaddlePoint = false;
                    break;
                }
            }

            if (isSaddlePoint) {
                saddlePointRow = i;
                saddlePointColumn = minRowElementIndex;
                break;
            }
        }

        if (saddlePointRow != -1 && saddlePointColumn != -1) {
            System.out.println("Saddle point coordinates: (" + saddlePointRow + ", " + saddlePointColumn + ")");
            System.out.println("Saddle point value: " + matrix[saddlePointRow][saddlePointColumn]);
        } else {
            System.out.println("No saddle point found.");
        }

        scanner.close();
    }
}













PROBLEM STATEMENT 8 : 
Program to find all the patterns of 0(1+)0 in the given string. Given a string containing 0's and 1's, find the total number of 0(1+)0 patterns in the string and output it. 0(1+)0 - There should be at least one '1' between the two 0's. For example, consider the following string. Input: 01101111010 Output: 3 Explanation: 01101111010 - count = 1
01101111010 - count = 2 01101111010- count = 3 Step to find all the patterns of 0(1+)0 in the given string  Input the given string.  Scan the string, character by character.  If the given pattern is encountered, increment count.  Print count. Program to find all the patterns of 0(1+)0 .

INPUT : 

import java.util.Scanner;

public class ZeroOnePatternShikhar {
    static int findPattern(char[] str) {
        char last = str[0];
        int i = 1, counter = 0;
        while (i < str.length) {
            if (str[i] == '1' && last == '0') {
                while (str[i] == '1')
                    i++;
                if (str[i] == '0')
                    counter++;
            }
            last = str[i];
            i++;
        }
        return counter;
    }

    public static void main(String[] args) {
        String string;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the string: ");
        string = sc.next();
        char[] str = string.toCharArray();
        System.out.println("Number of patterns: " + findPattern(str));
    }
}















PROBLEM STATEMENT 9: 
Write a java program to delete vowels from given string using StringBuffer class.

INPUT : 


import java.util.Scanner;

public class DeleteVowelsShikhar {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the string: ");
        String input = sc.nextLine();

        StringBuffer stringBuffer = new StringBuffer(input);
        deleteVowels(stringBuffer);

        System.out.println("String after removing vowels: " + stringBuffer.toString());
    }

    public static void deleteVowels(StringBuffer stringBuffer) {
        for (int i = 0; i < stringBuffer.length(); i++) {
            char c = stringBuffer.charAt(i);
            if (isVowel(c)) {
                stringBuffer.deleteCharAt(i);
                i--; // Adjust the index after deletion
            }
        }
    }

    public static boolean isVowel(char c) {
        c = Character.toLowerCase(c);
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
}

















PROBLEM STATEMENT 10 : 
Write a java program to create a class named 'Bank ' with the following data members:
 Name of depositor
 Address of depositor
 Account Number 
Balance in account 
Class 'Bank' has a method for each of the following: 1 - Generate a unique account number for each depositor For first depositor, account number will be 1001, for second depositor it will be 1002 and so on 2 - Display information and balance of depositor 3 - Deposit more amount in balance of any depositor 4 - Withdraw some amount from balance deposited 5 - Change address of depositor After creating the class, do the following operations 1 - Enter the information (name, address, account number, balance) of the depositors. Number of depositors is to be entered by user. 2 - Print the information of any depositor. 3 - Add some amount to the account of any depositor and then display final information of that depositor 4 - Remove some amount from the account of any depositor and then display final information of that depositor 5 - Change the address of any depositor and then display the final information of that depositor 6 - Randomly repeat these processes for some other bank accounts.


INPUT : 

import java.util.Scanner;

class Bank {
    String name;
    String address;
    int accountNumber;
    double balance;

    static int accountCounter = 1000;

    public Bank(String name, String address, double balance) {
        this.name = name;
        this.address = address;
        this.balance = balance;
        this.accountNumber = ++accountCounter;
    }

    public void displayInformation() {
        System.out.println("Name: " + name);
        System.out.println("Address: " + address);
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Balance: " + balance);
    }

    public void deposit(double amount) {
        balance += amount;
        System.out.println("Amount deposited successfully.");
        System.out.println("Updated balance: " + balance);
    }

    public void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            System.out.println("Amount withdrawn successfully.");
            System.out.println("Updated balance: " + balance);
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public void changeAddress(String newAddress) {
        address = newAddress;
        System.out.println("Address changed successfully.");
        System.out.println("Updated address: " + address);
    }
}

public class BankDemoShikhar {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of depositors: ");
        int numDepositors = scanner.nextInt();

        Bank[] accounts = new Bank[numDepositors];

        for (int i = 0; i < numDepositors; i++) {
            scanner.nextLine(); // Clear the newline character
            System.out.println("Enter the details of depositor " + (i + 1) + ":");
            System.out.print("Name: ");
            String name = scanner.nextLine();
            System.out.print("Address: ");
            String address = scanner.nextLine();
            System.out.print("Balance: ");
            double balance = scanner.nextDouble();

            accounts[i] = new Bank(name, address, balance);
        }

        System.out.print("Enter the account number to display information: ");
        int accountNumber = scanner.nextInt();
        boolean found = false;

        for (Bank account : accounts) {
            if (account.accountNumber == accountNumber) {
                System.out.println("Account information:");
                account.displayInformation();
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Account not found.");
        }

        System.out.print("Enter the account number to deposit amount: ");
        accountNumber = scanner.nextInt();
        found = false;

        for (Bank account : accounts) {
            if (account.accountNumber == accountNumber) {
                System.out.print("Enter the amount to deposit: ");
                double amount = scanner.nextDouble();
                account.deposit(amount);
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Account not found.");
        }

        System.out.print("Enter the account number to withdraw amount: ");
        accountNumber = scanner.nextInt();
        found = false;

        for (Bank account : accounts) {
            if (account.accountNumber == accountNumber) {
                System.out.print("Enter the amount to withdraw: ");
                double amount = scanner.nextDouble();
                account.withdraw(amount);
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Account not found.");
        }

        System.out.print("Enter the account number to change address: ");
        accountNumber = scanner.nextInt();
        found = false;

        for (Bank account : accounts) {
            if (account.accountNumber == accountNumber) {
                scanner.nextLine(); // Clear the newline character
                System.out.print("Enter the new address: ");
                String newAddress = scanner.nextLine();
                account.changeAddress(newAddress);
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Account not found.");
        }

        // Randomly perform operations on other bank accounts
        int randomIndex = (int) (Math.random() * numDepositors);
        Bank randomAccount = accounts[randomIndex];

        System.out.println("\nRandom account information before operations:");
        randomAccount.displayInformation();

        double randomDepositAmount = Math.random() * 1000;
        randomAccount.deposit(randomDepositAmount);

        double randomWithdrawAmount = Math.random() * 500;
        randomAccount.withdraw(randomWithdrawAmount);

        String randomAddress = "Random Address";
        randomAccount.changeAddress(randomAddress);

        System.out.println("\nRandom account information after operations:");
        randomAccount.displayInformation();
    }
}










PROBLEM STATEMENT 11 : 
Define a class WordExample having the following description: Data members/instance variables: private String strdata : to store a sentence. Parameterized Constructor WordExample(String) : Accept a sentence which may be terminated by either’.’, ‘? ’or ’!’ only. The words may be separated by more than one blank space and are in UPPER CASE. Member Methods: void countWord(): Find the number of words beginning and ending with a vowel. void placeWord(): Place the words which begin and end with a vowel at the beginning, followed by the remaining words as they occur in the sentence.

INPUT : 

import java.util.*;

public class WordExample {
    private String strdata;

    public WordExample(String sentence) {
        this.strdata = sentence;
    }

    public void countWord() {
        String[] words = strdata.split("\\s+");

        int count = 0;
        for (String word : words) {
            if (word.matches("^[AEIOU].*[AEIOU][.?!]?$")) {
                count++;
            }
        }

        System.out.println("Number of words beginning and ending with a vowel: " + count);
    }

    public void placeWord() {
        String[] words = strdata.split("\\s+");

        StringBuilder result = new StringBuilder();
        StringBuilder remaining = new StringBuilder();

        for (String word : words) {
            if (word.matches("^[AEIOU].*[AEIOU][.?!]?$")) {
                result.append(word).append(" ");
            } else {
                remaining.append(word).append(" ");
            }
        }

        result.append(remaining.toString().trim());

        System.out.println("Modified sentence: " + result);
    }

    public static void main(String[] args) {
        String sentence = "HELLO WORLD! THIS IS AN EXAMPLE.";
        WordExample wordExample = new WordExample(sentence);

        wordExample.countWord();
        wordExample.placeWord();
    }
}















PROBLEM STATEMENT 12 :
Write a Java program to create a class called ArrayDemo and overload arrayFunc() function. void arrayFunc(int [], int)  To find all pairs of elements in an Array whose sum is equal to a given number : Array numbers= [4, 6, 5, -10, 8, 5, 20], target=10 Output : Pairs of elements whose sum is 10 are : 4 + 6 = 10 5 + 5 = 10 -10 + 20 = 10 void arrayFunc(int A[], int p, int B[], int q)  Given two sorted arrays A and B of size p and q, Overload method arrayFunc() to merge elements of A with B by maintaining the sorted order i.e. fill A with first p smallest elements and fill B with remaining elements. Example: Input : int[] A = { 1, 5, 6, 7, 8, 10 } int[] B = { 2, 4, 9 } Output: Sorted Arrays: A: [1, 2, 4, 5, 6, 7] B: [8, 9, 10].

INPUT : 

public class ArrayDemo {
    
    // Method to find pairs of elements whose sum is equal to the target
    public void arrayFunc(int[] numbers, int target) {
        System.out.println("Pairs of elements whose sum is " + target + " are:");
        
        for (int i = 0; i < numbers.length; i++) {
            for (int j = i + 1; j < numbers.length; j++) {
                if (numbers[i] + numbers[j] == target) {
                    System.out.println(numbers[i] + " + " + numbers[j] + " = " + target);
                }
            }
        }
    }
    
    // Method to merge elements of A with B by maintaining sorted order
    public void arrayFunc(int[] A, int p, int[] B, int q) {
        int[] mergedArray = new int[p + q];
        int i = 0, j = 0, k = 0;
        
        while (i < p && j < q) {
            if (A[i] < B[j]) {
                mergedArray[k++] = A[i++];
            } else {
                mergedArray[k++] = B[j++];
            }
        }
        
        while (i < p) {
            mergedArray[k++] = A[i++];
        }
        
        while (j < q) {
            mergedArray[k++] = B[j++];
        }
        
        System.out.println("Sorted Arrays:");
        System.out.println("A: " + Arrays.toString(Arrays.copyOfRange(mergedArray, 0, p)));
        System.out.println("B: " + Arrays.toString(Arrays.copyOfRange(mergedArray, p, p + q)));
    }

    public static void main(String[] args) {
        ArrayDemo arrayDemo = new ArrayDemo();

        // Example 1: Finding pairs of elements
        int[] numbers = { 4, 6, 5, -10, 8, 5, 20 };
        int target = 10;
        arrayDemo.arrayFunc(numbers, target);

        // Example 2: Merging sorted arrays
        int[] A = { 1, 5, 6, 7, 8, 10 };
        int[] B = { 2, 4, 9 };
        arrayDemo.arrayFunc(A, A.length, B, B.length);
    }
}














PROBLEM STATEMENT 13 :  
Write a java program to calculate the area of a rectangle, a square and a circle. Create an abstract class 'Shape' with three abstract methods namely rectangleArea() taking two parameters, squareArea() and circleArea() taking one parameter each. Now create another class ‘Area’ containing all the three methods rectangleArea(),squareArea() and circleArea() for printing the area of rectangle, square and circle respectively. Create an object of class Area and call all the three methods. 

INPUT : 

import java.util.Scanner;

abstract class Shape {
    abstract void rectangleArea(double length, double width);
    abstract void squareArea(double side);
    abstract void circleArea(double radius);
}

class Area extends Shape {
   
    void rectangleArea(double length, double width) {
        double area = length * width;
        System.out.println("Area of Rectangle: " + area);
    }

        void squareArea(double side) {
        double area = side * side;
        System.out.println("Area of Square: " + area);
    }

   
    void circleArea(double radius) {
        double area = Math.PI * radius * radius;
        System.out.println("Area of Circle: " + area);
    }
}

public class Main {
    public static void main(String[] args) {
        Area area = new Area();
        Scanner scanner = new Scanner(System.in);

        // Input dimensions for the rectangle
        System.out.print("Enter length of the rectangle: ");
        double length = scanner.nextDouble();
        System.out.print("Enter width of the rectangle: ");
        double width = scanner.nextDouble();
        area.rectangleArea(length, width);

        // Input side for the square
        System.out.print("Enter side of the square: ");
        double side = scanner.nextDouble();
        area.squareArea(side);

        // Input radius for the circle
        System.out.print("Enter radius of the circle: ");
        double radius = scanner.nextDouble();
        area.circleArea(radius);

        scanner.close();
    }
}










PROBLEM STATEMENT 14 : 
Write a java program to implement abstract class and abstract method with following details: Create a abstract Base Class Temperature Data members: double temp; Method members: void setTempData(double) abstact void changeTemp() Sub Class Fahrenheit (subclass of Temperature) Data members: double ctemp; method member: Override abstract method changeTemp() to convert Fahrenheit temperature into degree Celsius by using formula C=5/9*(F-32) and display converted temperature Sub Class Celsius (subclass of Temperature) Data member: double ftemp; Method member: Override abstract method changeTemp() to convert degree Celsius into Fahrenheit temperature by using formula F=9/5*c+32 and display converted temperature.

INPUT : 

import java.util.Scanner;

abstract class Temperature {
    double temp;

    void setTempData(double temp) {
        this.temp = temp;
    }

    abstract void changeTemp();
}

class Fahrenheit extends Temperature {
    double ctemp;

    @Override
    void changeTemp() {
        ctemp = (5.0 / 9.0) * (temp - 32);
        System.out.println("Temperature in Celsius: " + ctemp);
    }
}

class Celsius extends Temperature {
    double ftemp;

    @Override
    void changeTemp() {
        ftemp = (9.0 / 5.0) * temp + 32;
        System.out.println("Temperature in Fahrenheit: " + ftemp);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Create objects of Fahrenheit and Celsius classes
        Fahrenheit fahrenheit = new Fahrenheit();
        Celsius celsius = new Celsius();

        // Take temperature input from the user
        System.out.print("Enter temperature in Fahrenheit: ");
        double fTemp = sc.nextDouble();
        System.out.print("Enter temperature in Celsius: ");
        double cTemp = sc.nextDouble();

        // Set temperature values using setTempData() method
        fahrenheit.setTempData(fTemp);
        celsius.setTempData(cTemp);

        // Convert and display temperature
        fahrenheit.changeTemp();
        celsius.changeTemp();
        
        sc.close();
    }
}









PROBLEM STATEMENT 15 : 
Write a java program to create an interface that consists of a method to display volume () as an abstract method and redefine this method in the derived classes to suit their requirements. Create classes called Cone, Hemisphere and Cylinder that implements the interface. Using these three classes, design a program that will accept dimensions of a cone, cylinder and hemisphere interactively and display the volumes. Volume of cone = (1/3)πr2h Volume of hemisphere = (2/3)πr3 Volume of cylinder = πr2h.

INPUT : 

import java.util.Scanner;

interface Volume {
    void displayVolume();
}

class Cone implements Volume {
    double radius;
    double height;

    Cone(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }

    public void displayVolume() {
        double volume = (Math.PI * radius * radius * height) / 3;
        System.out.println("Volume of Cone: " + volume);
    }
}

class Hemisphere implements Volume {
    double radius;

    Hemisphere(double radius) {
        this.radius = radius;
    }

    public void displayVolume() {
        double volume = (2 * Math.PI * radius * radius * radius) / 3;
        System.out.println("Volume of Hemisphere: " + volume);
    }
}

class Cylinder implements Volume {
    double radius;
    double height;

    Cylinder(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }

    public void displayVolume() {
        double volume = Math.PI * radius * radius * height;
        System.out.println("Volume of Cylinder: " + volume);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the radius of the Cone: ");
        double coneRadius = scanner.nextDouble();
        System.out.print("Enter the height of the Cone: ");
        double coneHeight = scanner.nextDouble();
        Cone cone = new Cone(coneRadius, coneHeight);
        cone.displayVolume();

        System.out.print("Enter the radius of the Hemisphere: ");
        double hemisphereRadius = scanner.nextDouble();
        Hemisphere hemisphere = new Hemisphere(hemisphereRadius);
        hemisphere.displayVolume();

        System.out.print("Enter the radius of the Cylinder: ");
        double cylinderRadius = scanner.nextDouble();
        System.out.print("Enter the height of the Cylinder: ");
        double cylinderHeight = scanner.nextDouble();
        Cylinder cylinder = new Cylinder(cylinderRadius, cylinderHeight);
        cylinder.displayVolume();

        scanner.close();
    }
}

















PROBLEM STATEMENT 16 : 
Write a java program to accept and print the employee details during runtime. The details will include employee id, name, dept_ Id. The program should raise an exception if user inputs incomplete or incorrect data. The entered value should meet the following conditions: (i) First Letter of employee name should be in capital letter. (ii) Employee id should be between 2001 and 5001 (iii) Department id should be an integer between 1 and 5. If the above conditions are not met then the application should raise specific exception else should complete normal execution.


INPUT : 

import java.util.Scanner;

class EmployeeException extends Exception {
    EmployeeException(String message) {
        super(message);
    }
}

class Employee {
    private int employeeId;
    private String employeeName;
    private int departmentId;

    Employee(int employeeId, String employeeName, int departmentId) {
        this.employeeId = employeeId;
        this.employeeName = employeeName;
        this.departmentId = departmentId;
    }

    public void displayDetails() {
        System.out.println("Employee ID: " + employeeId);
        System.out.println("Employee Name: " + employeeName);
        System.out.println("Department ID: " + departmentId);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter Employee ID (between 2001 and 5001): ");
            int employeeId = scanner.nextInt();
            if (employeeId < 2001 || employeeId > 5001) {
                throw new EmployeeException("Invalid Employee ID");
            }

            System.out.print("Enter Employee Name (First letter capital): ");
            String employeeName = scanner.next();
            if (!Character.isUpperCase(employeeName.charAt(0))) {
                throw new EmployeeException("Invalid Employee Name");
            }

            System.out.print("Enter Department ID (between 1 and 5): ");
            int departmentId = scanner.nextInt();
            if (departmentId < 1 || departmentId > 5) {
                throw new EmployeeException("Invalid Department ID");
            }

            Employee employee = new Employee(employeeId, employeeName, departmentId);
            employee.displayDetails();
        } catch (EmployeeException e) {
            System.out.println("Exception: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
}














PROBLEM STATEMENT 17 : 
Create a class MyCalculator which consists of a single method power(int, int). This method takes two integers, n and p, as parameters and finds n p . If either n or p is negative, then the method must throw an exception which says "n and p should be nonnegative". Input Format Each line of the input contains two integers, n and p . Output Format Each line of the output contains the result ,if neither of n and p is negative. Otherwise the output contains "n and p should be nonnegative". Sample Input 3 5 2 4 0 0 -1 -2 -1 3 Sample Output 243 16 java.lang.Exception: n and p should not be zero. java.lang.Exception: n or p should not be negative. java.lang.Exception: n or p should not be negative. Explanation In the first two cases, both n and p are positive. So, the power function returns the answer correctly. In the third case, both n and p are zero. So, the exception, "n and p should not be zero.” is printed. In the last two cases, at least one out of n and p is negative. So, the exception, "n or p should not be negative.” is printed for these two cases.

INPUT : 

import java.util.*;

class MyCalculator {
    public int power(int n, int p) throws Exception {
        if (n < 0 || p < 0) {
            throw new Exception("n and p should be nonnegative");
        } else if (n == 0 && p == 0) {
            throw new Exception("n and p should not be zero");
        } else {
            return (int) Math.pow(n, p);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        MyCalculator calculator = new MyCalculator();

        while (scanner.hasNext()) {
            int n = scanner.nextInt();
            int p = scanner.nextInt();

            try {
                int result = calculator.power(n, p);
                System.out.println(result);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        scanner.close();
    }
}












PROBLEM STATEMENT 18 : 
Write a java file handling program to count and display the number of palindrome present in a text file "myfile.txt". Example: If the file "myfile.txt" contains the following lines, My name is NITIN Hello aaa and bbb word How are You ARORA is my friend Output will be => 4.

INPUT :

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class PalindromeCounterShikhar {
    public static void main(String[] args) {
        String filename = "myfile.txt";
        int palindromeCount = 0;

        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] words = line.split(" ");

                for (String word : words) {
                    if (isPalindrome(word)) {
                        palindromeCount++;
                    }
                }
            }

            System.out.println("Number of palindromes in the file: " + palindromeCount);
        } catch (IOException e) {
            System.out.println("An error occurred while reading the file: " + e.getMessage());
        }
    }

    public static boolean isPalindrome(String word) {
        word = word.toLowerCase();
        int left = 0;
        int right = word.length() - 1;

        while (left < right) {
            if (word.charAt(left) != word.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
}
INPUT AS myfile.txt  :  
My name is NITIN
Hello aaa and bbb word
How are You
ARORA is my friend





















 PROBLEM STATEMENT 19 : 
Write a program MultiThreads that creates two threads-one thread with the name CSthread and the other thread named ITthread. Each thread should display its respective name and execute after a gap of 500 milliseconds. Each thread should also display a number indicating the number of times it got a chance to execute. 

INPUT : 

import java.util.*;
class CsThread extends Thread {
    private Thread t;
    private String threadName;

    CsThread(String name) {
        threadName = name;
        System.out.println("Creating " + threadName);
    }

    public void run() {
        System.out.println("Running " + threadName);
        try {
            for (int i = 1; i <= 4; i++) {
                System.out.println("Thread: " + threadName + ", " + i);
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            System.out.println("Thread " + threadName + " interrupted.");
        }
        System.out.println("Thread " + threadName + " exiting.");
    }

    public void start() {
        System.out.println("Starting " + threadName);
        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }
}

class ItThread extends Thread {
    private Thread t;
    private String threadName;

    ItThread(String name) {
        threadName = name;
        System.out.println("Creating " + threadName);
    }

    public void run() {
        System.out.println("Running " + threadName);
        try {
            for (int i = 1; i <= 4; i++) {
                System.out.println("Thread: " + threadName + ", " + i);
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            System.out.println("Thread " + threadName + " interrupted.");
        }
        System.out.println("Thread " + threadName + " exiting.");
    }

    public void start() {
        System.out.println("Starting " + threadName);
        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }
}

public class Main {
    public static void main(String args[]) {
        CsThread T1 = new CsThread("CSthread");
        T1.start();

        ItThread T2 = new ItThread("ITthread");
        T2.start();
    }
}









PROBLEM STATEMENT 20 : 
Write a java program for to solve producer consumer problem in which a producer produce a value and consumer consume the value before producer generate the next value.

INPUT : 

import java.util.*;
class Queue {
    int item = 0; // shared between producer and consumer
    boolean busy = false; // use of flag

    synchronized int get() // invoked by consumer
    {
        if (!busy) {
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println("Get: InterruptedException");
            }
        }
        System.out.println("Get: " + item);
        busy = false;
        notify();
        return item;
    }

    synchronized void put(int item) {
        if (busy) {
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println("Put: InterruptedException");
            }
        }
        this.item = item;
        busy = true;
        System.out.println("Put: " + item);
        notify();
    }
}

class Producer implements Runnable {
    int i;
    Queue q;

    Producer(Queue q) {
        this.q = q;
        new Thread(this, "Producer").start();
    }

    public void run() {
        try {
            while (i <= 10) {
                q.put(i++);
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class Consumer implements Runnable {
    Queue q;

    Consumer(Queue q) {
        this.q = q;
        new Thread(this, "Consumer").start();
    }

    public void run() {
        while (true) {
            try {
                q.get();
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Queue q = new Queue();
        Producer producer = new Producer(q);
        Consumer consumer = new Consumer(q);
    }
}














PROBLEM STATEMENT 21 : 
Write a method removeEvenLength that takes an ArrayList of Strings as a parameter and that removes all of the strings of even length from the list.

INPUT :

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        list.add("kiwi");
        list.add("orange");
        list.add("grape");
        list.add("melon");

        removeEvenLength(list);

        // Print the modified list
        System.out.println(list);
    }

    public static void removeEvenLength(ArrayList<String> list) {
        for (int i = 0; i < list.size(); i++) {
            String word = list.get(i);
            if (word.length() % 2 == 0) {
                list.remove(i);
                i--; // Decrement i to account for the removed element
            }
        }
    }
}










PROBLEM STATEMENT 22 : 
Write a method swapPairs that switches the order of values in an ArrayList of Strings in a pairwise fashion. Your method should switch the order of the first two values, then switch the order of the next two, switch the order of the next two, and so on. For example, if the list initially stores these values: {"four", "score", "and", "seven", "years", "ago"} your method should switch the first pair, "four", "score", the second pair, "and", "seven", and the third pair, "years", "ago", to yield this list: {"score", "four", "seven", "and", "ago", "years"} If there are an odd number of values in the list, the final element is not moved. For example, if the original list had been: {"to", "be", "or", "not", "to", "be", "hamlet"} It would again switch pairs of values, but the final value, "hamlet" would not be moved, yielding this list: {"be", "to", "not", "or", "be", "to", "hamlet"}.


INPUT :


import java.util.ArrayList;
import java.util.Scanner;

class PairDemo {
    public static void swapPairs(ArrayList<String> list) {
        for (int i = 0; i <= list.size() - 2; i += 2) {
            String str = list.get(i + 1);
            list.set(i + 1, list.get(i));
            list.set(i, str);
        }
    }
}

public class SpairShikhar {
    public static void main(String[] args) {
        int n;
        String str;
        Scanner sr = new Scanner(System.in);
        ArrayList<String> arrlist = new ArrayList<String>();

        System.out.println("Enter the number of items to be added in the ArrayList: ");
        n = sr.nextInt();

        for (int i = 1; i <= n; i++) {
            System.out.println("Enter Item: ");
            str = sr.next();
            arrlist.add(str);
        }

        System.out.println(" Before Switching ArrayList Items ");
        System.out.println(arrlist.toString());

        PairDemo.swapPairs(arrlist);

        System.out.println(" After Switching ArrayList Items ");
        System.out.println(arrlist.toString());
    }
}


















